/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
#define ll long long 
class Solution {
public:
    
   unordered_map<TreeNode*,TreeNode*>parent;
   unordered_map<TreeNode*,int>sum;
    
    void get_sum(TreeNode* root){
        
        if(!root) return;
        
        int sm=0;
        if(root->left) sm+=root->left->val;
        if(root->right) sm+=root->right->val;
        sum[root]=sm;
        
        if(root->left) get_sum(root->left);
        if(root->right) get_sum(root->right);
    }
    
   void get_parent(TreeNode* root) {
       
        if (root == NULL) return;
    
        if (root -> left) {
            parent[root -> left ] = root;
            get_parent(root -> left);
        }
        if (root -> right) {
            parent[root -> right] = root;
            get_parent(root -> right);
        }
    }
    
   void dfs(TreeNode* root,int cur_level,vector<int>&level){
        
        if(!root) return;
        
        if(root->left) dfs(root->left,cur_level+1,level);
        
        int temp=level[cur_level];
       
        if(parent[root]!=NULL){
            temp-=sum[parent[root]];
        }
        
           root->val=temp;
        
        
       if(root->right) dfs(root->right,cur_level+1,level);
        
    }
    
    
    
    TreeNode* replaceValueInTree(TreeNode* root) {
        
        parent[root]=NULL;
        
        get_parent(root);
        get_sum(root);
        
        vector<int>level;
        
        queue<TreeNode*>q;
        q.push(root);
        
        while(!q.empty()){
            
            int sz=q.size();
            int sum=0;
            
            for(int i=0;i<sz;i++){
                
                TreeNode* tp=q.front();
                q.pop();
                sum+=tp->val;
                    
                if(tp->left){
                    q.push(tp->left);
                }
                if(tp->right){
                    q.push(tp->right);
                }
            }
            level.push_back(sum);
        }
        
        dfs(root,0,level);
        
        root->val=0;
        
        return root;
        
    }
};
