class Solution {
public:
    vector<int>pref,mx;

    int mx_sum;
    
    void dfs(int i,vector<int>& cost,int n,int sum){
        
        if(i>n) return;

        pref[i-1]=sum+cost[i-1];
        
        dfs(i*2,cost,n,sum+cost[i-1]);
        dfs(i*2+1,cost,n,sum+cost[i-1]);   
    }
    
    int dfs2(int i,vector<int>&cost,int n){
        
        if(i>n) return 0;
        
        int left=dfs2(i*2,cost,n);
        int right=dfs2(i*2+1,cost,n);

        mx[i-1]=max(left,right);
        
        return max(left,right)+cost[i-1];
    }

    int ans=0;

    void dfs3(int i,int n,vector<int>&cost,int op){

        if(i>n) return;
        
        int temp_op=mx_sum-(pref[i-1]+mx[i-1]+op);

        ans+=temp_op;

        dfs3(i*2,n,cost,temp_op+op);
        dfs3(i*2+1,n,cost,temp_op+op);
    }
    
    
    int minIncrements(int n, vector<int>& cost) {
        
        pref.resize(n);
        mx.resize(n);
        
        int sum=0;
        
        dfs(1,cost,n,sum);
        dfs2(1,cost,n);

        mx_sum=mx[0]+cost[0];

        dfs3(1,n,cost,0);

        return ans;
        
    }
};
